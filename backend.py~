# -*- coding: utf-8 -*-
###############################################################################
##
## Copyright (C) 2014 Tavendo GmbH
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
###############################################################################

import os
import datetime
import psycopg2

from twisted.python import log
from twisted.enterprise import adbapi
from twisted.internet.defer import inlineCallbacks

from autobahn import wamp
from autobahn.twisted.wamp import ApplicationSession
from autobahn.wamp.exception import ApplicationError
from autobahn.wamp.types import PublishOptions


## WAMP application component with our app code.
##
class Copycat(ApplicationSession):

   def __init__(self, config):
      ApplicationSession.__init__(self)
      self.config = config
      self.init_db()


   def init_db(self):

      ##db = psycopg2.connect(database="kati85_shila_copycat", user="kati85", password="Rahxepho", host="141.82.60.28", port="5432")
      
      self.db = adbapi.ConnectionPool(
           'psycopg2',
      	   database = 'kati85_shila_copycat',
      	   user = 'kati85',
      	   port = '5432',
      	   password = 'Rahxepho',
      	   host = '141.82.60.28')
      print "Opened database successfully"
      
      self.db.runOperation('''/*****************************************************************************
                             * Alte Tabellen (in der richtigen Reihenfolge) löschen
                             *****************************************************************************/
                            
                            DROP TABLE  IF EXISTS d_teilnehmer CASCADE;
                            DROP TABLE  IF EXISTS spielgruppe  CASCADE;
                            DROP TABLE  IF EXISTS spielrunde   CASCADE;
                            DROP TABLE  IF EXISTS d_begriff    CASCADE;
                            DROP TABLE  IF EXISTS spieler      CASCADE;
                            
                            DROP DOMAIN IF EXISTS D_LEVEL      CASCADE;
                            DROP DOMAIN IF EXISTS D_FUNKTION   CASCADE;
                            
                            
                            /*****************************************************************************
                             * Datentypen
                             *****************************************************************************/
                            
                            CREATE DOMAIN D_FUNKTION
                              AS
                              VARCHAR(10) CHECK (VALUE IN ('Zeichner', 'Mitspieler'));
                            
                            CREATE DOMAIN D_LEVEL
                              AS
                              VARCHAR(6) CHECK (VALUE IN ('leicht', 'mittel', 'schwer'));
                            
                            
                            /*****************************************************************************
                             * Tabellen
                             *****************************************************************************/
                            
                            CREATE TABLE spieler
                              (s_id        SERIAL      NOT NULL,
                               nickname    VARCHAR(30) NOT NULL,
                               passwort    VARCHAR(12) NOT NULL,
                               email       VARCHAR(50) NOT NULL,
                               punktestand INTEGER     NOT NULL DEFAULT 0,
                               eingeloggt  BOOLEAN     NOT NULL DEFAULT FALSE,
                            
                               PRIMARY KEY (s_id),
                               UNIQUE (nickname),
                               UNIQUE (email)
                              );
                            
                            CREATE TABLE d_begriff
                              (b_id  SERIAL      NOT NULL,
                               wort  VARCHAR(50) NOT NULL,
                               level D_LEVEL     NOT NULL,
                            
                               PRIMARY KEY (b_id),
                               UNIQUE (wort)
                              );
                            
                            CREATE TABLE spielrunde
                              (sr_id      SERIAL  NOT NULL,
                               b_id       INTEGER NOT NULL,
                               startzeit  TIME    NOT NULL,
                               erraten    INTEGER,
                               restzeit   INTERVAL,
                               aufgegeben BOOLEAN NOT NULL DEFAULT FALSE,
                               verwarnt   INTEGER NOT NULL DEFAULT 0,
                            
                               PRIMARY KEY (sr_id),
                               FOREIGN KEY (b_id)     REFERENCES d_begriff,
                               FOREIGN KEY (erraten)  REFERENCES spieler (s_id),
                            
                               CHECK (NOT (erraten IS NOT NULL AND restzeit IS NULL)),
                               CHECK (NOT (aufgegeben AND erraten IS NOT NULL)),
                               CHECK (NOT (aufgegeben AND restzeit IS NOT NULL)),
                               CHECK (NOT (verwarnt > 1 AND aufgegeben)),
                               CHECK (NOT (verwarnt > 1 AND erraten IS NOT NULL)),
                               CHECK (NOT (verwarnt > 1 AND restzeit IS NOT NULL))
                              );
                            
                            CREATE TABLE spielgruppe
                              (g_id        SERIAL      NOT NULL,
                               gruppenname VARCHAR(30) NOT NULL,
                            
                               PRIMARY KEY (g_id)
                              );
                            
                            CREATE TABLE d_teilnehmer
                              (t_id     SERIAL     NOT NULL,
                               s_id     INTEGER    NOT NULL,
                               sr_id    INTEGER    NOT NULL,
                               g_id     INTEGER    NOT NULL,
                               funktion D_FUNKTION NOT NULL, 
                            
                               PRIMARY KEY (t_id),
                               FOREIGN KEY (s_id)  REFERENCES spieler,
                               FOREIGN KEY (sr_id) REFERENCES spielrunde,
                               FOREIGN KEY (g_id)  REFERENCES spielgruppe
                              );
                            
                            
                            /*****************************************************************************
                             * Alte Daten (in der richtigen Reihenfolge) löschen
                             *****************************************************************************/
                            
                            DELETE FROM d_teilnehmer;
                            DELETE FROM spielgruppe;
                            DELETE FROM spielrunde;
                            DELETE FROM d_begriff;
                            DELETE FROM spieler;
                            
                            
                            /*****************************************************************************
                             * Daten
                             *****************************************************************************/
                            
                            INSERT INTO spieler(nickname, passwort, email, punktestand)
                            VALUES
                               ('admin',    'copycat',     'test@hs-augsburg.de',               0),
                               ('kati',     'blubb',       'katrin.riedelbauch@hs-augsburg.de', 15),
                               ('nicki',    'schinken',    'nicole.weiss@hs-augsburg.de',       14),
                               ('kevin',    'kev',         'kevin@hs-augsburg.de',              5),
                               ('erich',    'seifert',     'seife@hs-augsburg.de',              9),
                               ('nik',      'klever',      'kleber@hs-augsburg.de',             12),
                               ('wolfgang', 'kowarschick', 'wk@hs-augsburg.de',                 29)
                            ;
                            
                            INSERT INTO d_begriff(wort, level)
                            VALUES
                               ('schuhkarton',       'leicht'), --ID 1 bis 12
                               ('hosenanzug',        'leicht'),
                               ('tafelschwamm',      'leicht'),
                               ('erdbeerkuchen',     'leicht'),
                               ('schweinebraten',    'leicht'),
                               ('regenschirm',       'leicht'),
                               ('laptoptasche',      'leicht'),
                               ('halskette',         'leicht'),
                               ('gürtelschnalle',    'leicht'),
                               ('buchstabensalat',   'leicht'),
                               ('schlüsselanhänger', 'leicht'),
                               ('badehose',          'leicht'),
                            
                               ('springen',          'mittel'), --ID 13 bis 24
                               ('laufen',            'mittel'), 
                               ('schlafen',          'mittel'),
                               ('lachen',            'mittel'),
                               ('schluckauf',        'mittel'),
                               ('trinken',           'mittel'),
                               ('fallen',            'mittel'),
                               ('rollen',            'mittel'),
                               ('schwimmen',         'mittel'),
                               ('zittern',           'mittel'),
                               ('pinkeln',           'mittel'),
                               ('heulen',            'mittel'),
                            
                               ('trauer',            'schwer'), --ID 25 bis 35
                               ('mitleid',           'schwer'),
                               ('freude',            'schwer'),
                               ('angst',             'schwer'),
                               ('wut',               'schwer'),
                               ('beziehung',         'schwer'),
                               ('neid',              'schwer'),
                               ('hass',              'schwer'),
                               ('liebe',             'schwer'),
                               ('lust',              'schwer'),
                               ('sterben',           'schwer')
                            ;
                            
                            INSERT INTO spielrunde(b_id, startzeit, erraten, restzeit, aufgegeben, verwarnt)
                            VALUES
                               (4,  '12:05:35', 7,    '00:20', false, 0),  -- Schwierigkeitsgrad: leicht, mittel, schwer
                               (7,  '12:06:45', NULL,  NULL,   true,  0),
                               (2,  '12:07:55', 3,    '00:10', false, 0),
                               (8,  '12:09:05', 2,    '00:03', false, 0),
                               (9,  '12:10:15', NULL,  NULL,   false, 0),
                               (13, '12:11:25', 7,    '00:01', false, 1),
                               (34, '12:12:35', 2,    '00:17', false, 0),
                               (27, '12:13:45', 3,    '00:40', false, 0),
                            
                               (18, '17:37:02', NULL,  NULL,   true,  1),  -- Schwierigkeitsgrad: mittel
                               (23, '17:38:12', 4,    '00:19', false, 0),
                            
                               (1,  '20:41:00', 7,    '00:57', false, 0),  -- Schwierigkeitsgrad: leicht, mittel
                               (10, '20:42:10', NULL,  NULL,   false, 2),
                               (15, '20:43:20', 7,    '00:14', false, 0),
                               (20, '20:44:30', NULL,  NULL,   false, 0)
                            ;
                            
                            INSERT INTO spielgruppe(gruppenname)
                            VALUES
                               ('sketchers'),
                               ('x-men'),
                               ('die_Unglaublichen')
                            ;
                            
                            INSERT INTO d_teilnehmer(s_id, sr_id, g_id, funktion)
                            VALUES
                               (2, 1, 1, 'Zeichner'),   -- 1. Spieldurchlauf
                               (3, 1, 1, 'Mitspieler'),
                               (5, 1, 1, 'Mitspieler'),
                               (7, 1, 1, 'Mitspieler'),
                               (2, 2, 1, 'Mitspieler'), 
                               (3, 2, 1, 'Zeichner'),
                               (5, 2, 1, 'Mitspieler'),
                               (7, 2, 1, 'Mitspieler'),
                               (2, 3, 1, 'Mitspieler'),  
                               (3, 3, 1, 'Mitspieler'),
                               (5, 3, 1, 'Zeichner'),
                               (7, 3, 1, 'Mitspieler'),
                               (2, 4, 1, 'Mitspieler'),  
                               (3, 4, 1, 'Mitspieler'),
                               (5, 4, 1, 'Mitspieler'),
                               (7, 4, 1, 'Zeichner'),
                            
                               (2, 5,  1, 'Zeichner'),   -- 2. Spieldurchlauf
                               (3, 5,  1, 'Mitspieler'),
                               (5, 5,  1, 'Mitspieler'),
                               (7, 5,  1, 'Mitspieler'),
                               (2, 6,  1, 'Mitspieler'), 
                               (3, 6,  1, 'Zeichner'),
                               (5, 6,  1, 'Mitspieler'),
                               (7, 6,  1, 'Mitspieler'),
                               (2, 7,  1, 'Mitspieler'),  
                               (3, 7,  1, 'Mitspieler'),
                               (5, 7,  1, 'Zeichner'),
                               (7, 7,  1, 'Mitspieler'),
                               (2, 8,  1, 'Mitspieler'),  
                               (3, 8,  1, 'Mitspieler'),
                               (5, 8,  1, 'Mitspieler'),
                               (7, 8,  1, 'Zeichner'),
                            
                               (4, 9,  2, 'Zeichner'),   -- 1. Spieldurchlauf
                               (6, 9,  2, 'Mitspieler'),
                               (4, 10, 2, 'Mitspieler'),
                               (6, 10, 2, 'Zeichner'),   -- Spiel vorher abgebrochen, nur ein Spieldurchlauf
                            
                               (6, 11, 3, 'Zeichner'),   -- 1. Spieldurchlauf
                               (7, 11, 3, 'Mitspieler'),
                               (6, 12, 3, 'Mitspieler'), 
                               (7, 12, 3, 'Zeichner'),
                            
                               (6, 13, 3, 'Zeichner'),   -- 2. Spieldurchlauf
                               (7, 13, 3, 'Mitspieler'),
                               (6, 14, 3, 'Mitspieler'),
                               (7, 14, 3, 'Zeichner')
                            ;
           		      ''')
      
      print "Table created successfully"

   nutzername = ""

   def check_login(self, name, passwort):
      def run(txn):
         txn.execute("SELECT nickname, passwort FROM spieler WHERE nickname=%s AND passwort=%s", [name, passwort])
         success = False
         for row in txn.fetchall():
             success = True
         txn.execute("UPDATE spieler SET eingeloggt = TRUE WHERE nickname=%s", [name])
         self.publish("de.copycat.login_logout")
         return success 
      self.nutzername = name 
      return self.db.runInteraction(run)  
  
   def registrierung(self, name, email, passwort):
      def run(txn):
          txn.execute("SELECT nickname FROM spieler WHERE nickname=%s", [name])
          fehler = False
          for row in txn.fetchall():
              fehler = "Benutzername"
          if(fehler != False):
              return fehler
          txn.execute("SELECT email FROM spieler WHERE email=%s", [email])
          for row in txn.fetchall():
              fehler = "Email-Adresse"
          if(fehler != False):
              return fehler
          txn.execute("INSERT INTO spieler(nickname, email, passwort, eingeloggt) VALUES (%s, %s, %s, TRUE)", [name, email, passwort])
          self.publish("de.copycat.login_logout")  
          self.nutzername = name
      return self.db.runInteraction(run)
    
   def angemeldeterNutzer(self): 
       return self.nutzername
   
   def nutzerAnzeigen(self):
       def run(txn):
         txn.execute("SELECT nickname, punktestand FROM spieler WHERE eingeloggt = TRUE ORDER BY nickname")
         results = []
         for row in txn.fetchall():
             results.append(row)
         return results
       return self.db.runInteraction(run)  
   
   
      
   @inlineCallbacks
   def onJoin(self, details):   
        
      def ausloggen(spieler):
          def run(txn):
             txn.execute("UPDATE spieler SET eingeloggt = FALSE WHERE nickname = %s", [spieler])
             self.publish("de.copycat.login_logout")
          return self.db.runInteraction(run)
     
      try:
         yield self.register(self.check_login, "de.copycat.check_login")
         yield self.register(self.registrierung, "de.copycat.check_registrierung")
         yield self.register(self.angemeldeterNutzer, "de.copycat.check_nutzername")
         yield self.register(self.nutzerAnzeigen, "de.copycat.nutzer_anzeigen")
         yield self.register(ausloggen, "de.copycat.ausloggen")
         print("Ok, registered {} procedures.")
      except Exception as e:
         print("Failed to register procedures: {}".format(e))
    
      print("Copycat Backend ready!")
      
   def onDisconnect(self):
      reactor.stop()


def make(config):
   ##
   ## This component factory creates instances of the
   ## application component to run.
   ##
   ## The function will get called either during development
   ## using the ApplicationRunner below, or as a plugin running
   ## hosted in a WAMPlet container such as a Crossbar.io worker.
   ##
   if config:
      return Copycat(config)
   else:
      ## if no config given, return a description of this WAMPlet ..
      return {'label': 'Copycat Service WAMPlet',
              'description': 'This is the backend WAMP application component of Copycat.'}

if __name__ == '__main__':
   from autobahn.twisted.wamp import ApplicationRunner

   ## test drive the component during development ..
   runner = ApplicationRunner(
      url = "ws://localhost:8080/ws",
      realm = "realm1",
      debug = False, ## low-level WebSocket debugging
      debug_wamp = True, ## WAMP protocol-level debugging
      debug_app = True) ## app-level debugging

   runner.run(make)
